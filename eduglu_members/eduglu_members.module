<?php

include_once('eduglu_members.features.inc');


/**
 * Implementation of hook_init().
 */
function eduglu_members_init() {
  drupal_add_css(drupal_get_path('module', 'eduglu_members') .
                 "/eduglu_members.css");
}

/**
 * Implementation of hook_menu_alter().
 */
function eduglu_members_menu_alter(&$items) {
  // Views: disable views that we are 'overriding'
  $views_defaults = variable_get('views_defaults', array());
  $disabled = array(
    'tracker',
  );
  $set = FALSE;
  foreach ($disabled as $view_name) {
    if (empty($views_defaults[$view_name])) {
      $set = TRUE;
      $views_defaults[$view_name] = TRUE;
    }
  }
  if ($set) {
    variable_set('views_defaults', $views_defaults);
  }

  // Remove node/add/profile as a suitable alternative is provided by
  // content_profile.
  if (isset($items['node/add/profile'])) {
    unset($items['node/add/profile']);
  }
  if (isset($items['user/%user/dashboard'])) {
    unset($items['user/%user/dashboard']);
    unset($items['user/%user/dashboard/custom-1']);
    unset($items['user/%user/dashboard/custom-2']);
    unset($items['user/%user/dashboard/add']);
  }
  if (isset($items['user/%user/track'])) {
    unset($items['user/%user/track']);
    unset($items['user/%user/track/posts']);
  }
  // Temp hack until there's more features to add (the fabled global apps) or if we want to customize the dashboard in any way.
  if (isset($items['user/%user/features'])) {
    unset ($items['user/%user/features']);
  }
  if (isset($items['user/%user/view'])) {
    $items['user/%user/view']['title'] = t('Profile');
  }
  if (isset($items['user/%user_category/edit'])) {
    $items['user/%user_category/edit']['title'] = t('Account settings');
  }
}

/*
 * Implementation of hook_nodeapi().
 */
function eduglu_members_nodeapi(&$node, $op) {
if ($op == "view" && $node->type == "uprofile"
    // Only redirect on a normal node build/view. Otherwise, this kills cron
    // because the search module will load uprofile nodes and then get redirected.
    && (!isset($node->build_mode) || $node->build_mode == NODE_BUILD_NORMAL)) { 
    drupal_goto("user/" . $node->uid);
  }
}

/**
 * Implmentation of hook_form_alter().
 */
function eduglu_members_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == "uprofile_node_form") {
    $form['title']['#value'] = 'User Profile';
    $form['title']['#type'] = 'value';
    $form['title']['#required'] = FALSE;
  }
}

/**
 * Implementation of hook_context_links_alter().
 */
function eduglu_members_context_links_alter(&$links) {
  global $user;
  $space = spaces_get_space();
  if ($space && $space->type == 'user' && $space->id == $user->uid && node_access('create', 'uprofile')) {
    // If the user has already created a profile, link to edit form, otherwise, link to node add form.
    $nid = db_result(db_query("SELECT nid 
                                 FROM {node} 
                                 WHERE type = 'uprofile' 
                                 AND uid = %d", $user->uid));
    if (!empty($nid)) {
      $prepend = array(
        'profile' => array(
          'title' => t('Edit my profile'),
          'href' => "node/" . $nid . "/edit",
          'custom' => TRUE,
        ),
      );
    }
    else {
      $prepend = array(
        'profile' => array(
          'title' => t('Edit my profile'),
          'href' => "node/add/uprofile",
          'custom' => TRUE,
        ),
      ); 
    }
    $links = $prepend + $links;
  }
}

/**
 * Implementation of hook_block()
 */
function eduglu_members_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('User Profile Block with stats and bio');
      return $blocks;
    
    case 'view':
      global $user;
      $uid = 0;
      if (is_numeric(arg(1))) {
        $uid = check_plain(arg(1));
        $account = user_load($uid);
      }
      $content .= "";

      if (user_access('access user profiles') && arg(0) == "user" && $uid != 0) {
        $profile = node_load(array('type' => 'uprofile', 'uid' => $uid));

        $name = (isset($profile->field_name[0]['value'])) ? $profile->field_name[0]['value'] : $account->name;

        if ($profile->field_name[0]['value']) {
          $content .= "<strong>Name</strong> " . $profile->field_name[0]['value'] . "<br />";
        }      
        if ($profile->field_major[0]['value']) {
          $content .= "<strong>Major</strong> ". $profile->field_major[0]['value'] ."<br />";
        }
        if ($profile->field_location[0]['value']) {
          $content .= "<strong>Location</strong> ". check_plain($profile->field_location[0]['value']) ."<br />";
        }
        if ($profile->field_blog[0]['url']) {
          $url_text = ShortenText($profile->field_blog[0]['url'], 20);
          $content .= "<strong>Web</strong> ". l($url_text, $profile->field_blog[0]['url'],
            array('absolute' => true)) ."<br />"; // maybe the link field module has a theme function?
        }
        if ($profile->field_about_me[0]['value']) {
          $content .= "<strong>Bio</strong> ". filter_xss($profile->field_about_me[0]['value']) ."<br />";
        }
  
        // Load stats info
        $num_nodes = db_result(db_query("
        SELECT count(*) FROM {node} 
        WHERE uid = %d AND
        type NOT IN ('group_wiki', 'blog_feed', 'usernode', 'uprofile')", $uid));
 
        $num_comments = db_result(db_query("
        SELECT count(*) FROM {comments} WHERE uid = %d", $uid));

        $content .= "<table id='stats'>";
        $content .= "<tr><td>". $num_nodes ." Posts</td>
        <td class='left-border'>". $num_comments ." Comments</td></tr>";
        $content .= "</table>";
        $content .= "</ul>";
        $content .= "<hr />";

        if ($user->uid != $uid) {
          $content .= "<strong>" . t("Connect with !name", array('!name' => $name)) . "</strong>";
          $contact_methods = array();
          $contact_methods[] = l(t("Send @name an email", array('@name' => $name)), "user/" . $uid . "/contact");
          $content .= theme('item_list', $contact_methods);
          $content .= "<hr />";
        }

        // Load user's groups.
        // Query the database for the user's groups
        $results = db_query('SELECT og.nid, n.title 
                              FROM {og_uid} og 
                              JOIN {node} n 
                              JOIN {og} o 
                              WHERE og.uid = %s 
                              AND og.nid=n.nid 
                              AND o.nid=og.nid 
                              AND o.og_private = 0 
                              ORDER BY n.title', $uid);

        $items = array();
        while ($group = db_fetch_object($results)) {
          $items[] = l($group->title, 'node/' . $group->nid);
        }

        $possesive_name = explode(" ", check_plain($name)); 
        $possesive_name_str = $possesive_name[0] ."'s Groups";
        $content .= "<strong>". $possesive_name_str . "</strong>";
        if ($items) {
          $content .= theme('item_list', $items); 
        }
        else {
          $content .= "<ul><li>" . $possesive_name[0] . " hasn't joined any groups yet.</li></ul>";
        }

        // return new block
        $block['subject'] = '';
        $block['content'] = $content;
        return $block;
      }
  }
}

function ShortenText($text, $numChars) {
	if (strlen($text) > $numChars) {
		$text = substr($text,0,$numChars);
		//$text = substr($text,0,strrpos($text,' '));
		$text = $text ."...";
	}
	
	return $text;
}

function fix_twitter_link($twitter_text) {
  if (stristr($twitter_text, "twitter.com")) {
    $twitter_parts = explode("/", $twitter_text) ;
    return check_plain(end(array_values($twitter_parts)));
  }
  else {
    return check_plain($twitter_text);
  }
}
