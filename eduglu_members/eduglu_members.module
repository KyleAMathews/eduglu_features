<?php

include_once('eduglu_members.features.inc');


/**
 * Implementation of hook_init().
 */
function eduglu_members_init() {
  drupal_add_css(drupal_get_path('module', 'eduglu_members') .
                 "/eduglu_members.css");
}

/**
 * Implementation of hook_menu_alter().
 */
function eduglu_members_menu_alter(&$items) {
  // Views: disable views that we are 'overriding'
  $views_defaults = variable_get('views_defaults', array());
  $disabled = array(
    'tracker',
  );
  $set = FALSE;
  foreach ($disabled as $view_name) {
    if (empty($views_defaults[$view_name])) {
      $set = TRUE;
      $views_defaults[$view_name] = TRUE;
    }
  }
  if ($set) {
    variable_set('views_defaults', $views_defaults);
  }

  // Remove node/add/profile as a suitable alternative is provided by
  // content_profile.
  if (isset($items['node/add/profile'])) {
    unset($items['node/add/profile']);
  }
  if (isset($items['user/%user/dashboard'])) {
    unset($items['user/%user/dashboard']);
    unset($items['user/%user/dashboard/custom-1']);
    unset($items['user/%user/dashboard/custom-2']);
    unset($items['user/%user/dashboard/add']);
  }
  if (isset($items['user/%user/contact'])) {
    unset($items['user/%user/contact']);
  }
  if (isset($items['user/%user/track'])) {
    unset($items['user/%user/track']);
    unset($items['user/%user/track/posts']);
  }
  // Temp hack until there's more features to add (the fabled global apps) or if we want to customize the dashboard in any way.
  if (isset($items['user/%user/features'])) {
    unset ($items['user/%user/features']);
  }
  if (isset($items['user/%user/view'])) {
    $items['user/%user/view']['title'] = t('Profile');
  }
  if (isset($items['user/%user_category/edit'])) {
    $items['user/%user_category/edit']['title'] = t('Account settings');
  }
}

/*
 * Implementation of hook_nodeapi().
 */
function eduglu_members_nodeapi(&$node, $op) {
  if ($op == "view" && $node->type == "uprofile") {
    drupal_goto("user/" . $node->uid);
  }
}

/**
 * Implementation of hook_context_links_alter().
 */
function eduglu_members_context_links_alter(&$links) {
  global $user;
  $space = spaces_get_space();
  if ($space && $space->type == 'user' && $space->id == $user->uid && node_access('create', 'uprofile')) {
    // If the user has already created a profile, link to edit form, otherwise, link to node add form.
    $nid = db_result(db_query("SELECT nid 
                                 FROM {node} 
                                 WHERE type = 'uprofile' 
                                 AND uid = %d", $user->uid));
    if (!empty($nid)) {
      $prepend = array(
        'profile' => array(
          'title' => t('Edit my profile'),
          'href' => "node/" . $nid . "/edit",
          'custom' => TRUE,
        ),
      );
    }
    else {
      $prepend = array(
        'profile' => array(
          'title' => t('Edit my profile'),
          'href' => "node/add/uprofile",
          'custom' => TRUE,
        ),
      ); 
    }
    $links = $prepend + $links;
  }
}

/**
 * Implementation of hook_block()
 */
function eduglu_members_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('User Profile Block with stats and bio');
      return $blocks;
    
    case 'view':
      global $user;
      $uid = 0;
      if (is_numeric(arg(1))) {
        $uid = check_plain(arg(1));
      }
      $content .= "";

      if (user_access('access content') && arg(0) == "user" && $uid != 0) {
        // Load info for profile (name, location, bio)
        $bio_results = db_fetch_array(db_query("SELECT
          field_name_value AS name, 
      	  field_location_value AS location, 
          field_blog_url AS web, 
      	  field_about_me_value AS bio,
          field_twitter_value as twitter,
      	  field_linkedin_profile_url as linkedin,
          field_facebook_public_url as facebook,
      	  field_role_value as role,
          field_major_value as major
      	  FROM {content_type_uprofile} c JOIN {node} n 
          WHERE c.nid = n.nid AND n.uid = %d", $uid));
        
        if ($bio_results['name']) {
          $content .= "<strong>Name</strong> " . $bio_results['name'] . "<br />";
        }      
        if ($bio_results['major']) {
          $content .= "<strong>Major</strong> ". $bio_results['major'] ."<br />";
              }
        if ($bio_results['role'] || $bio_results['role'] == 0) {
          $role = "";
          switch($bio_results['role']){
            case 0:
              $role = "Student";
              break;
            case 1:
              $role = "Staff";
              break;
            case 2:
              $role = "Professor";
              break;
            case 3:
              $role = "Alumni";
              break;
          }
          //$content .= "<strong>Role</strong> ". $role ."<br />";
              }
              if ($bio_results['location']) {
                $content .= "<strong>Location</strong> ". check_plain($bio_results['location']) ."<br />";
              }
              if ($bio_results['web']) {
          $url_text = ShortenText($bio_results['web'], 20);
          $content .= "<strong>Web</strong> ". l($url_text, $bio_results['web'],
                  array('absolute' => true)) ."<br />"; // maybe the link field module has a theme function?
              }
              if ($bio_results['bio']) {
          $content .= "<strong>Bio</strong> ". filter_xss($bio_results['bio']) ."<br />";
              }
        
          // Load stats info
          $num_nodes = db_result(db_query("
          SELECT count(*) FROM {node} 
          WHERE uid = %d AND
          type NOT IN ('group_wiki', 'blog_feed', 'usernode', 'uprofile')", $uid));
          
          $num_comments = db_result(db_query("
          SELECT count(*) FROM {comments} WHERE uid = %d", $uid));
          
          $content .= "<table id='stats'>";
          $content .= "<tr><td>". $num_nodes ." Posts</td>
          <td class='left-border'>". $num_comments ." Comments</td></tr>";
          $content .= "</table>";
          $content .= "<hr />";
          
          // Contact part
          $name = check_plain($bio_results['name']);
          $content .= "<strong>Connect with ". $name ."</strong>";
          $content .= "<ul>";
          if ($user->uid != 0 && $user->uid != $uid) { // You can't contact yourself through island.
            $content .= "<li>". l("Email ". $name ." through Island", "user/". $uid ."/contact") ."</li>";
          }
          if ($bio_results['twitter']) {
            $bio_results['twitter'] = fix_twitter_link($bio_results['twitter']);
            $content .= "<li>". l("Follow ". $name ." on Twitter", 
            "http://twitter.com/". check_plain($bio_results['twitter'])) ."</li>";
          }
          if ($bio_results['linkedin']) {
            $content .= "<li>". l("Connect to ". $name ." on LinkedIn", 
            check_plain($bio_results['linkedin'])) ."</li>";
          }
          if ($bio_results['facebook']) {
            $content .= "<li>". l("Friend ". $name ." on Facebook", 
            check_plain($bio_results['facebook'])) ."</li>";
          }
          if (!$bio_results['facebook'] && !$bio_results['linkedin'] && !$bio_results['twitter']
              && $uid == $user->uid) {
            $content .= '<li>Edit your profile to give other ways for people to connect with you.</li>';
          }
          $content .= "</ul>";
        
          $content .= "<hr />";
	
          // Load user's groups.
          // Query the database for the user's groups
          $results = db_query('SELECT og.nid, n.title from {og_uid} og join 
          {node} n join {og} o where og.uid = %s and og.nid=n.nid and 
          o.nid=og.nid and o.og_private = 0 order by n.title', $uid);
            
          $items = array();
          while ($group = db_fetch_object($results)) {
            $items[] = l($group->title, 'node/' . $group->nid);
          }
          
          $possesive_name = explode(" ", check_plain($bio_results['name']));
          $possesive_name_str = $possesive_name[0] ."'s Groups";
          $content .= "<strong>". $possesive_name_str . "</strong>";
          if ($items) {
            $content .= theme('item_list', $items); 
          }
          else {
            $content .= "<ul><li>" . $possesive_name[0] . " hasn't joined any groups yet.</li></ul>";
          }
        
          // return new block
          $block['subject'] = '';//$bio_results['name'];
          $block['content'] = $content;
          return $block;
        }
  }
}

function ShortenText($text, $numChars) {
	if (strlen($text) > $numChars) {
		$text = substr($text,0,$numChars);
		//$text = substr($text,0,strrpos($text,' '));
		$text = $text ."...";
	}
	
	return $text;
}

function fix_twitter_link($twitter_text) {
  if (stristr($twitter_text, "twitter.com")) {
    $twitter_parts = explode("/", $twitter_text) ;
    return check_plain(end(array_values($twitter_parts)));
  }
  else {
    return check_plain($twitter_text);
  }
}
