<?php

include_once('eduglu_groups.features.inc');

/**
 * Implementation of hook_enable().
 */
function eduglu_groups_enable() {
  ctools_include('export');
  ctools_export_set_status('spaces_presets', 'og_private', TRUE);
  ctools_export_set_status('spaces_presets', 'og_controlled', TRUE);
  ctools_export_set_status('spaces_presets', 'og_public', TRUE);
}

/*
 * Impmentation of hook_init().
 */
function eduglu_groups_init() {
   drupal_add_css(drupal_get_path('module', 'eduglu_groups')
                 .'/eduglu_groups.css');   
       // Add our space feed link if in a space.
  if ($space = spaces_get_space()) {
    $feed_url = url('rss.xml', array('absolute' => true));
    
    drupal_add_feed($feed_url, "Latest posts from the " . $space->group->title . " Group.");
  }
}

/**
 * Implementation of hook_block().
 */
function eduglu_groups_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      return array('addform' => array('info' => t('User add form')));
    case 'view':
      if (eduglu_groups_addform_access()) {
        module_load_include('inc', 'eduglu_groups', 'eduglu_groups');
        $space = spaces_get_space();
        return array('subject' => t('Add existing users to group'), 'content' => drupal_get_form('eduglu_groups_addform', $space->group));
      }
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function eduglu_groups_theme() {
  return array(
    'eduglu_groups_addform' => array(
      'arguments' => array('form' => array()),
      'path' => drupal_get_path('module', 'eduglu_groups'),
      'file' => 'eduglu_groups.inc',
    ),
  );
}

/**
 * Access callback for using the members addform.
 */
function eduglu_groups_addform_access() {
  global $user;
  $space = spaces_get_space();
  $group = node_load($space->id);
  
  return og_is_group_admin($group, $user) && $space && $space->type == 'og';
}

/**
 * Implmentation of hook_menu().
 */
function eduglu_groups_menu() {
  $items = array();
  $items['node/%node/manage-members'] = array(
    'title' => 'Manage Members',
    'page callback' => 'eduglu_groups_manage_members',
    'page arguments' => array(1),
    'access callback' => 'eduglu_groups_manage_members_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['members/add/ajax'] = array(
      'page callback' => 'eduglu_groups_addform_ajax',
      'page arguments' => array(),
      'access callback' => 'eduglu_groups_addform_access',
      'access arguments' => array(),
      'type' => MENU_CALLBACK,
      'file' => 'eduglu_groups.inc',
  );
  $items['members/add/autocomplete'] = array(
      'page callback' => 'eduglu_groups_autocomplete',
      'access callback' => 'user_access',
      'access arguments' => array('access user profiles'),
      'type' => MENU_CALLBACK,
      'file' => 'eduglu_groups.inc',
  );

  return $items;
}

/**
 * If the node isn't a group and the current user isn't group admin in that 
 * group, deny access.
 */
function eduglu_groups_manage_members_access($node) {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  else if (!og_is_group_type($node->type)) {
    return FALSE;
  }
  else if (!og_is_group_admin($node, $user)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

function eduglu_groups_manage_members($group_node) {
  return views_embed_view('eduglu_group_membership_tools', 'page_1');
}

/**
 * Implementation of hook_menu_alter().
 */
function eduglu_groups_menu_alter(&$items) {
  if (isset($items['user/%user_category/edit/groups'])) {
    unset($items['user/%user_category/edit/groups']);
    unset($items['user/%user/edit/groups']);
  }
}

/*
 * Impmentation of hook_preprocess_page().
 */
function eduglu_groups_preprocess_page(&$vars, $hook) {
    // Add our space feed link if in a space.
  if ($space = spaces_get_space()) {
    $feed_url = url('rss.xml', array('absolute' => true));
    $vars['feed_icons'] = " " . theme('feed_icon', url("rss.xml"), $space->group->title . " Group RSS Feed");
  }
}

function eduglu_groups_theme_registry_alter(&$theme_registry) {
  $theme_registry['views_view__views_view_rss']['preprocess functions'][] = 'eduglu_groups_preprocess_views_view_rss';
}

function eduglu_groups_form_alter($form, $form_state, $form_id) {
  if ($form_id == "group_node_form") {
    unset($form['buttons']['preview']);
  }
}

/*
 * Implementation of hook_views_pre_render().
 * Modify feeds view to set proper title for space feeds.
 */
function eduglu_groups_preprocess_views_view_rss(&$vars) {
   if ($space = spaces_get_space()) {
      $vars['title'] = $space->group->title . " Group";  
   }
}

/*
 * Implementation of hook_nodeapi().
 * Redirect group nodes to their space homepage.
 */
function eduglu_groups_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == "view" && $node->type == "group") {
    if ($space = spaces_get_space()) {
      drupal_goto($node->purl . "/" . $space->controllers->variable->values['space']['site_frontpage']);
    }
  }
}

/****************************************************************************************
 * Provide option for spaces to restrict access in public groups to authenticated users.
 ****************************************************************************************/

/**
* Implementation of hook_node_access_explain().
*/
function eduglu_groups_node_access_explain($row) {
  if ($row->realm == 'eduglu_groups_authenticated') {
    return t('All authenticated users may view this node.');
  }
}

/**
* Implementation of hook_node_access_records.
*/
function eduglu_groups_node_access_records($node) {
  // The 'authenticated' grant that will be set on public OG content.
  $grant = array (
    'realm' => 'eduglu_groups_authenticated',
    'gid' => 0,
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
    'priority' => 0,
  );

  // Protected group posts.
  if (!empty($node->og_groups) && $node->og_public && eduglu_groups_is_space_protected($node)) {
    return array($grant);
  }
  
  return NULL;
}

/**
 * Checks if new node is in a space that protects its content from anonymous users.
 */
function eduglu_groups_is_space_protected($node) {
  if (!og_is_group_type($node->type)) {
    $space = spaces_load('og', current(array_keys($node->og_groups)));
  }
  else {
    return false; // Group nodes themselves aren't protected. Bad idea?
  }
  $result = db_result(db_query("SELECT id
                              FROM {spaces_overrides}
                              WHERE value LIKE '%eduglu_protected%'
                              AND id = %d", $space->id));
  return $result;
}

/**
* Implementation of hook_node_grants().
*/
function eduglu_groups_node_grants($account, $op) {
  $grants = array();

  // Allow authenticated users to view public group nodes.
  if ($op == 'view' && in_array('authenticated user', $account->roles)) {
    $grants['eduglu_groups_authenticated'][] = 0;
  }

  return $grants;
}

/**
* Implementation of hook_og_access_grants_alter().
*/
function eduglu_groups_og_access_grants_alter(&$grants, $node) {
  // og_access is about to insert grants for this node. Remove any public grants
  // so that this node isn't visible to everyone. It will be replaced by our
  // own mymodule_authenticated grant.
  foreach ($grants as $key => $grant) {
    if ($grant['realm'] == 'og_public' && eduglu_groups_is_space_protected($node)) {
      unset($grants[$key]);
    }
  }
}

/*************************************************************
 * Extra OG Actions to let group admins control their groups.
 ************************************************************/
/**
* Implementation of hook_action_info().
*/
function eduglu_groups_action_info() {
  return array(
    'eduglu_groups_move_user_action' => array(
      'description' => t('Move user to a different group'),
      'type' => 'user',
      'configurable' => TRUE,
      'hooks' => array(),
    ),
    'eduglu_groups_remove_user_action' => array(
      'description' => t('Remove user from the group'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(),    
    ),
    'eduglu_groups_demote_user_action' => array(
      'description' => t('Demote user from administrator in the group'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(),    
    ),
    'eduglu_groups_promote_user_action' => array(
      'description' => t('Promote user to an administrator in the group'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(),    
    ),
  );
}

/**
 * Provide form for group admins to choose which group to move the user to.
 */
function eduglu_groups_move_user_action_form($context) {
  $form = array();

  if (!isset($context['groups'])) {
    $context['groups'] = array();
  }

  $groups = og_all_groups_options();
  if (count($groups)) {
    $form['groups'] = array(
      '#type' => 'select',
      '#title' => t('Groups'),
      '#options' => $groups,
      '#description' => t('Select the groups to which this user should be moved to.'),
      '#default_value' => $context['groups'],
      '#required' => TRUE,
      '#multiple' => TRUE,
    );
  }
  else {
    drupal_set_message(t('Please <a href="!url">create</a> a group first.', array('!url' => url('admin/content'))));
  }
  return $form;

}

/**
 * Submission handler for eduglu_groups_move_user_action configuration form.
 */
function eduglu_groups_move_user_action_submit($form, &$form_state) {
  return array(
    'groups' => $form_state['values']['groups'],
  );
}

/**
* Implementation of a Drupal action.
* Moves the current user to a choosen group.
*/
function eduglu_groups_move_user_action(&$user, $context) {
  $space = spaces_get_space();
  if ($space->type != "og") {
    return;
  }  
  // get the uid from the object
  if (isset($user->uid)) {
    $uid = $user->uid;
  }
  elseif (isset($context['uid'])) {
    $uid = $context['uid'];
  }

  $group_node = node_load($space->id);

  // First remove the user from the existing group.
  og_delete_subscription($group_node->nid, $uid);

  // Then add the user to all the selected groups.
  if (isset($context['groups'])) {
    foreach ($context['groups'] as $gid) {
      og_save_subscription($gid, $user->uid, array('is_active' => 1));
    }
    watchdog('action', 'Moved user %name to groups %groups.', array('%name' => $user->name, '%groups' => implode(',', $context['groups'])));
  }

}

/**
* Implementation of a Drupal action.
* Removes the current user from the group.
*/
function eduglu_groups_remove_user_action(&$user, $context) {
  $space = spaces_get_space();
  if ($space->type != "og") {
    return;
  }
  // Get the uid from the object.
  if (isset($user->uid)) {
    $uid = $user->uid;
  }
  elseif (isset($context['uid'])) {
    $uid = $context['uid'];
    $user = user_load($uid);
  }

  $group_node = node_load($space->id);

  og_delete_subscription($group_node->nid, $uid);
  watchdog('action', 'Deleted user %name from the group %group.', array('%name' => $user->name, '%group' => $group_node->title));
}

/**
* Implementation of a Drupal action.
* Demote the current user from a group administrator.
*/
function eduglu_groups_demote_user_action(&$user, $context) {
  $space = spaces_get_space();
  if ($space->type != "og") {
    return;
  }
  // Get the uid from the object.
  if (isset($user->uid)) {
    $uid = $user->uid;
  }
  elseif (isset($context['uid'])) {
    $uid = $context['uid'];
    $user = user_load($uid);
  }

  $group_node = node_load($space->id);

  og_save_subscription($group_node->nid, $user->uid, array('is_admin' => 0));
  watchdog('action', 'Demoted user %name from <em>group administrator</em> in %group.', array('%name' => $user->name, '%group' => $group_node->title));
}

/**
* Implementation of a Drupal action.
* Promote the current user to a group administrator.
*/
function eduglu_groups_promote_user_action(&$user, $context) {
  $space = spaces_get_space();
  if ($space->type != "og") {
    return;
  }
  // Get the uid from the object.
  if (isset($user->uid)) {
    $uid = $user->uid;
  }
  elseif (isset($context['uid'])) {
    $uid = $context['uid'];
    $user = user_load($uid);
  }

  $group_node = node_load($space->id);

  og_save_subscription($group_node->nid, $user->uid, array('is_admin' => 1));
  watchdog('action', 'Promoted user %name to <em>group administrator</em> in %group.', array('%name' => $user->name, '%group' => $group_node->title));
}
