<?php

include_once('eduglu_groups.features.inc');

/**
 * Implementation of hook_enable().
 */
function eduglu_groups_enable() {
  ctools_include('export');
  ctools_export_set_status('spaces_presets', 'og_private', TRUE);
  ctools_export_set_status('spaces_presets', 'og_controlled', TRUE);
  ctools_export_set_status('spaces_presets', 'og_public', TRUE);
}

/*
 * Impmentation of hook_init().
 */
function eduglu_groups_init() {
   drupal_add_js(drupal_get_path('module', 'eduglu_groups')
                 .'/eduglu_groups.js', 'module');
   
       // Add our space feed link if in a space.
  if ($space = spaces_get_space()) {
    $feed_url = url('rss.xml', array('absolute' => true));
    
    drupal_add_feed($feed_url, "Latests posts from the " . $space->group->title . " Group.");
  }
}

/*
 * Implementation of hook_menu_alter().
 */
function eduglu_groups_menu_alter(&$items) {
  if (isset($items['user/%user_category/edit/groups'])) {
    unset($items['user/%user_category/edit/groups']);
    unset($items['user/%user/edit/groups']);
  }
}

/*
 * Impmentation of hook_preprocess_page().
 */
function eduglu_groups_preprocess_page(&$vars, $hook) {
  // Create my groups div.
  $vars['my_groups'] = eduglu_groups_prepare_my_groups();
  
    // Add our space feed link if in a space.
  if ($space = spaces_get_space()) {
    $feed_url = url('rss.xml', array('absolute' => true));
    $vars['feed_icons'] = " " . theme('feed_icon', url("rss.xml"), $space->group->title . " Group RSS Feed");
  }
}

function eduglu_groups_prepare_my_groups() {
  global $user;
  
  $results = db_query("SELECT p.value, n.title
                      FROM {og_uid} o
                      JOIN {purl} p
                      JOIN {node} n
                      WHERE o.nid = p.id
                      AND o.nid = n.nid
                      AND p.provider = 'spaces_og'
                      AND o.uid = %d
                      AND o.is_active = 1", $user->uid);
  
  $groups = array();
  while ($data = db_fetch_array($results)) {
    $groups[$data['value']] = $data['title'];
  }
  
  // Sort the groups.
  natcasesort($groups);
  $num_columns = 2;
  if (count($groups > 45)) {
    $num_columns = 3;
  }
  $length_column = count($groups) / 3 + 1; // Add one so no orphaned column at end.
  $chunked_groups = array_chunk($groups, $length_column, true);
  
  $output .= "<div id='my-groups'>";
  $output .= "<h2 class='grid-3'>My Groups</h2><p class='grid-5'>"
  . l("Browse all groups", "og/all", array('attributes' => array('class' => 'grid-2')))
  . l("Manage my group memberships", "og_mailinglist/subscriptions", array('attributes' => array('class' => 'grid-2')))
  . "<hr />";
  $output .= "<div class='clear-block'>";
  foreach ($chunked_groups as $groups) {
    $output .= "<div class='grid-4'>";
    foreach ($groups as $value => $group_title) {
      $output .= l($group_title, $value, array('purl' => array('disabled' => TRUE)));
    }
    $output .= "</div>";
  }
  $output .= "</div>";
  
  $output .= "<strong>" .
    l("Create new group", "node/add/group", array('attributes' => array('class' => 'grid-2 create-new-group')))
    . "</strong>";
  $output .= "</div>";  
  return $output;  
}

function eduglu_groups_theme_registry_alter(&$theme_registry) {
  $theme_registry['views_view__views_view_rss']['preprocess functions'][] = 'eduglu_groups_preprocess_views_view_rss';
}

/*
 * Implementation of hook_views_pre_render().
 * Modify feeds view to set proper title for space feeds.
 */
function eduglu_groups_preprocess_views_view_rss(&$vars) {
   if ($space = spaces_get_space()) {
      $vars['title'] = "$space->group->title Group";  
   }
}

/*
 * Implementation of hook_nodeapi().
 * Redirect group nodes to their space homepage.
 */
function eduglu_groups_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == "view" && $node->type == "group") {
    if ($space = spaces_get_space()) {
      drupal_goto($node->purl . "/" . $space->controllers->variable->values['space']['site_frontpage']);
    }
  }
}

/****************************************************************************************
 * Provide option for spaces to restrict access in public groups to authenticated users.
 ****************************************************************************************/

/**
* Implementation of hook_node_access_explain().
*/
function eduglu_groups_node_access_explain($row) {
  if ($row->realm == 'eduglu_groups_authenticated') {
    return t('All authenticated users may view this node.');
  }
}

/**
* Implementation of hook_node_access_records.
*/
function eduglu_groups_node_access_records($node) {
  // The 'authenticated' grant that will be set on public OG content.
  $grant = array (
    'realm' => 'eduglu_groups_authenticated',
    'gid' => 0,
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
    'priority' => 0,
  );

  // Protected group posts.
  if (!empty($node->og_groups) && $node->og_public && eduglu_groups_is_space_protected($node)) {
    return array($grant);
  }
  
  return NULL;
}

/**
 * Checks if new node is in a space that protects its content from anonymous users.
 */
function eduglu_groups_is_space_protected($node) {
  if (!og_is_group_type($node->type)) {
    $space = spaces_load('og', current(array_keys($node->og_groups)));
  }
  else {
    return false; // Group nodes themselves aren't protected. Bad idea?
  }
  $result = db_result(db_query("SELECT id
                              FROM {spaces_overrides}
                              WHERE value LIKE '%eduglu_protected%'
                              AND id = %d", $space->id));
  return $result;
}

/**
* Implementation of hook_node_grants().
*/
function eduglu_groups_node_grants($account, $op) {
  $grants = array();

  // Allow authenticated users to view public group nodes.
  if ($op == 'view' && in_array('authenticated user', $account->roles)) {
    $grants['eduglu_groups_authenticated'][] = 0;
  }

  return $grants;
}

/**
* Implementation of hook_og_access_grants_alter().
*/
function eduglu_groups_og_access_grants_alter(&$grants, $node) {
  // og_access is about to insert grants for this node. Remove any public grants
  // so that this node isn't visible to everyone. It will be replaced by our
  // own mymodule_authenticated grant.
  foreach ($grants as $key => $grant) {
    if ($grant['realm'] == 'og_public' && eduglu_groups_is_space_protected($node)) {
      unset($grants[$key]);
    }
  }
}
