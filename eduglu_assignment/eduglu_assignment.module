<?php

include_once('eduglu_assignment.features.inc');

/**
* Implementation of hook_form_alter().
*/
function eduglu_assignment_form_alter(&$form, $form_state, $form_id) {
  global $user;
  switch ($form_id) {

    case 'eduglu_blog_node_form':
     $results = db_query("SELECT n.title, n.nid, o.group_nid
                           FROM {node} n
                           JOIN {og_uid} u
                           JOIN {og_ancestry} o
                           WHERE n.nid = o.nid
                           AND u.nid = o.group_nid
                           AND u.uid = %d
                           AND n.type = 'assignment'
                           AND n.nid IN (SELECT nid FROM {content_type_assignment} where field_eduglu_assignment_due_date_value > now())", $user->uid);
     $assignments = array();
     while ($info = db_fetch_array($results)) {
       $group_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $info['group_nid']));
       $assignments[$info['nid']] = "[" . $group_title . "] " . $info['title'];
     }
     if (!empty($form['nid']['#value'])) {
       $default_value = db_result(db_query("SELECT assignment_nid FROM {eduglu_assignment} WHERE nid = %d", $form['nid']['#value']));
     }
     $field_assignment = array(
       '#title' => t('Assignment Submission'),
       '#description' => t('Select the assignment (if any) that this post is for.'),
       '#type' => 'select',
       '#default_value' => $default_value,
       '#options' => $assignments,
       '#weight' => -3,
     );
     $form['field_assignment'] = $field_assignment;
     break;
  }
}

/**
 * Implementation of hook_nodeapi().
 *
 * Detect saving of a node that references an assignment and save that reference.
 */
function eduglu_assignment_nodeapi(&$node, $op) {
  if (($op == "insert" || $op == "update") && !empty($node->field_assignment)) {
    db_query("DELETE FROM {eduglu_assignment} WHERE nid = %d", $node->nid);
    $data = array('nid' => $node->nid, 'assignment_nid' => $node->field_assignment);
    drupal_write_record('eduglu_assignment', $data);

    // Let user know their post was submitted to the right place
    $assignment_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $node->field_assignment));
    drupal_set_message(t("Post saved to assignment: !assignment", array('!assignment' => l($assignment_title, 'node/' . $node->field_assignment))));
  }
}

/**
 * Implementation of hook_block()
 */
function eduglu_assignment_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Block listing posts which completed this assignment.');
      return $blocks;

    case 'view':
      $nid = arg(1);
      if (!empty($nid) && is_numeric($nid)) {
        $nid = check_plain(arg(1));
      }
      else {
        return;
      }
      $results = db_query("SELECT n.nid, n.type, n.uid, n.title
                           FROM {eduglu_assignment} e
                           JOIN {node} n
                           ON n.nid = e.nid
                           WHERE assignment_nid = %d", $nid);
      $submissions = array();
      while ($info = db_fetch_array($results)) {
        $account = user_load($info['uid']);
        $name = (!empty($account->realname)) ? $account->realname : $account->name;
        $submissions[$info['nid']] = l($info['title'] . " by " . $name, 'node/' . $info['nid'], array('purl' => array('disabled' => TRUE)));
      }
      if (empty($submissions)) {
        $submissions = array(0 => "No submissions yet");
      }
      $block['subject'] = 'Assignment submissions';
      $block['content'] = theme('item_list', $submissions);

      return $block;
  }
}
