<?php

include_once('eduglu_core.features.inc');

/**
 * Implementation of hook_menu().
 */
function eduglu_core_menu() {
  $items['eduglu_front_page_redirect'] = array(
    'title' => "redirecting...",
    'description' => t('Just a handy redirect tool'),
    'page callback' => 'eduglu_core_redirect',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Implemenation of hook_nodeapi().
 **/
function eduglu_core_nodeapi(&$node, $op) {
  global $user;
  switch ($op) {
    case 'load':
      if ($user->uid != 0) {
        // Add variable w/ count of new nodes for user since their last visit.
        $node->new_comment_count = db_result(db_query("SELECT count(*)
                                                        FROM {comments} c
                                                        INNER JOIN
                                                        {history} h
                                                        ON c.nid = h.nid
                                                        WHERE h.uid = %d
                                                        AND c.nid = %d
                                                        AND c.timestamp > h.timestamp;", $user->uid, $node->nid));
      }
      break;
  }
}
/**
 * Redirect authenticated users to their dashboard away from the welcome page.
 */
function eduglu_core_redirect() {
  global $user;
  if ($user->uid == 0) {
    drupal_goto("welcome");
  }
  else {
    drupal_goto("dashboard");
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function eduglu_core_menu_alter(&$items) {
  // Kill undesirable menu items
  $yank = array(
    'book',
    'rss.xml',
    'node/%node/outline',
  );
  foreach ($yank as $path) {
    if (!empty($items[$path])) {
      unset($items[$path]);
    }
  }
}

function eduglu_core_form_alter(&$form, $form_state, $form_id) {
//dpm($form_id);
//dpm($form);
//dpm($form_state);
  if ($form_id == 'user_login_block') {
    $form['#action'] = "";
    $form['#submit'][] = "eduglu_core_login_redirect";
  }
  switch ($form_id) {
    // Hide the eduglu_welcome + spaces_dashboard features in groups as they're
    // not useful there.
    case 'spaces_features_form':
      $space = spaces_get_space();
      if ($space->type == "og") {
        unset($form['spaces_features']['eduglu_welcome']);
        unset($form['labels']['eduglu_welcome']);
        unset($form['settings']['eduglu_welcome']);
        unset($form['spaces_features']['spaces_dashboard']);
        unset($form['labels']['spaces_dashboard']);
        unset($form['settings']['spaces_dashboard']);
      }
  }

  if ($form['#id'] == "node-form") {
    // Remove group public checkbox. 
    if (isset($form['og_nodeapi'])) {
      _eduglu_core_make_hidden($form['og_nodeapi']);
    }
    // Even if you have the perms, we don't want you messing with this stuff
    $disable = array('menu', 'comment_settings');
    foreach ($disable as $key) {
      if (!empty($form[$key])) {
        $form[$key]['#access'] = FALSE;
      }
    }
  }
  if ($form_id == "comment_form") {
    unset($form['author']);
    unset($form['_author']);
    $form['comment_filter']['comment']['#title'] = "";
  }
}
function eduglu_core_login_redirect($form, &$form_state) {
  $account = user_load(array('name' => $form_state['values']['name'], 'status' => 1));
  if (!empty($account)) {
    // If the user's email address is invalid, redirect to the register form.
    if (!valid_email_address($account->mail)) {
      $form_state['redirect'] = "register";
    }
    else if ($GLOBALS['_user_' . $account->uid]) {
      $form_state['redirect'] = "register";
    }
    else {
      $form_state['redirect'] = "dashboard";
    }
  }
  else {
    $form_state['redirect'] = "dashboard";
  }
}

function eduglu_core_user($op, &$edit, &$account, $category) {
  if ($op == "insert") {
    $GLOBALS['_user_' . $account->uid] = 1; 
//    drupal_goto("register");
  }
}

/**
 * Set all elements in a given form to 'value'. Using value preserves the tree and prevents
 * The element from being rendered.
 */
function _eduglu_core_make_hidden(&$form) {
  if (isset($form['#type'])) {
    $form['#type'] = 'value';
    $form['#required'] = FALSE;
  }
  if (is_array($form)) {
    foreach ($form as $key => $value) {
      if (is_array($value) && strpos($key, '#') !== 0) {
        _eduglu_core_make_hidden($form[$key]);
      }
    }
  }
}
/**
 * Generates an array of admin links for the current space suitable
 * for use in theme_links().
 */
function eduglu_core_admin_links($space = NULL) {
  $links = array();
  $space = !isset($space) ? spaces_get_space() : $space;

  // Within a space
  if (!empty($space)) {
    if ($space->type == 'og' && spaces_access_admin()) {
      $item = menu_get_item("node/{$space->id}/edit");
      if ($item && $item['access']) {
        $links['settings'] = array(
          'title' => t('@type settings', array('@type' => ucwords(node_get_types('name', $space->group->type)))),
          'href' => $item['href'],
        );
      }

      $item = menu_get_item("node/{$space->id}/features");
      if ($item && $item['access']) {
        $links['features'] = array(
          'title' => t('Customize features'),
          'href' => $item['href'],
        );
      }
      $item = menu_get_item("node/{$space->id}/manage-members");
      if ($item && $item['access']) {
        $links['manage-members'] = array(
          'title' => t('Manage members'),
          'href' => $item['href'],
        );
      }
         $val = db_result(db_query("SELECT bid
                                 FROM {book} b
                                 JOIN {og_ancestry} o
                                 ON b.bid = o.nid
                                 WHERE o.group_nid = %d
                                 LIMIT 1", $space->id));
      if (!empty($val)
           && (($space->controllers->variable->values['preset']['spaces_features']['eduglu_book'])
           || ($space->controllers->variable->values['space']['spaces_features']['eduglu_book']))) {
      $item = menu_get_item("node/{$space->id}/outline_designer");
        if ($item && $item['access']) {
          $links['outline'] = array(
            'title' => t('Outline book pages'),
            'href' => $item['href'],
          );
        }
      }
    }
  }
  // Sitewide
  else if (user_access('administer site configuration')) {
    $links['features'] = array(
      'title' => t('Customize features'),
      'href' => "features",
    );
    $links['reorder'] = $reorder;
  }
  drupal_alter('eduglu_admin_links', $links, $space);
  return $links;
}

/**
 * Implementation of hook_wysiwyg_editor_settings_alter().
 */
function eduglu_core_wysiwyg_editor_settings_alter(&$settings, $context) {
  // Restrict height of text area to 160 on comment textareas but not on node textareas.
  if ($context['profile']->editor == 'ckeditor' && arg(1) != "add") {
    $settings['height'] = 160;
  }
}
